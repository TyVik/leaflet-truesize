!function(a,b){typeof exports==='object'&&typeof module!=='undefined'?b(require('leaflet')):typeof define==='function'&&define.amd?define(['leaflet'],b):(b(a.L))}(this,(function(a){'use strict';a=a&&a.hasOwnProperty('default')?a['default']:a;var b=6371008.8,c={meters:b,metres:b,millimeters:b*1000,millimetres:b*1000,centimeters:b*100,centimetres:b*100,kilometers:b/1000,kilometres:b/1000,miles:b/1609.344,nauticalmiles:b/1852,inches:b*39.370,yards:b/1.0936,feet:b*3.28084,radians:1,degrees:b/111325};function d(a,b){if(a===undefined||a===null)throw new Error('radians is required');if(b&&typeof b!=='string')throw new Error('units must be a string');var d=c[b||'kilometers'];if(!d)throw new Error(b+' units is invalid');return a*d}function e(a){if(a===null||a===undefined)throw new Error('radians is required');var b=a%(2*Math.PI);return b*180/Math.PI}function f(a){if(a===null||a===undefined)throw new Error('degrees is required');var b=a%360;return b*Math.PI/180}function g(a){return!!a&&a.constructor===Object}function h(a){if(!a)throw new Error('coord is required');if(a.type==='Feature'&&a.geometry!==null&&a.geometry.type==='Point')return a.geometry.coordinates;if(a.type==='Point')return a.coordinates;if(Array.isArray(a)&&a.length>=2&&a[0].length===undefined&&a[1].length===undefined)return a;throw new Error('coord must be GeoJSON Point or an Array of numbers')}function i(a,b,c){c=c||{};if(!g(c))throw new Error('options is invalid');var d=c.final;if(d===!0)return j(a,b);var i=h(a),k=h(b),l=f(i[0]),m=f(k[0]),n=f(i[1]),o=f(k[1]),p=Math.sin(m-l)*Math.cos(o),q=Math.cos(n)*Math.sin(o)-Math.sin(n)*Math.cos(o)*Math.cos(m-l);return e(Math.atan2(p,q))}function j(a,b){var c=i(b,a);c=(c+180)%360;return c}function k(a){if(!a)throw new Error('coord is required');if(a.type==='Feature'&&a.geometry!==null&&a.geometry.type==='Point')return a.geometry.coordinates;if(a.type==='Point')return a.coordinates;if(Array.isArray(a)&&a.length>=2&&a[0].length===undefined&&a[1].length===undefined)return a;throw new Error('coord must be GeoJSON Point or an Array of numbers')}function l(a,b,c){c=c||{};if(!g(c))throw new Error('options is invalid');var e=c.units,h=k(a),i=k(b),j=f((i[1]-h[1])),l=f((i[0]-h[0])),m=f(h[1]),n=f(i[1]),o=Math.pow(Math.sin(j/2),2)+Math.pow(Math.sin(l/2),2)*Math.cos(m)*Math.cos(n);return d(2*Math.atan2(Math.sqrt(o),Math.sqrt(1-o)),e)}function m(a){return a&&a.__esModule&&Object.prototype.hasOwnProperty.call(a,'default')?a['default']:a}function n(a,b){return b={exports:{}}, a(b,b.exports), b.exports}var o=n(function(a,b){Object.defineProperty(b,"__esModule",{value:!0});b.earthRadius=6371008.8;b.factors={centimeters:b.earthRadius*100,centimetres:b.earthRadius*100,degrees:b.earthRadius/111325,feet:b.earthRadius*3.28084,inches:b.earthRadius*39.370,kilometers:b.earthRadius/1000,kilometres:b.earthRadius/1000,meters:b.earthRadius,metres:b.earthRadius,miles:b.earthRadius/1609.344,millimeters:b.earthRadius*1000,millimetres:b.earthRadius*1000,nauticalmiles:b.earthRadius/1852,radians:1,yards:b.earthRadius/1.0936};b.unitsFactors={centimeters:100,centimetres:100,degrees:0.000008982708286548395,feet:3.28084,inches:39.370,kilometers:0.001,kilometres:0.001,meters:1,metres:1,miles:0.0006213711922373339,millimeters:1000,millimetres:1000,nauticalmiles:0.0005399568034557236,radians:1/b.earthRadius,yards:0.91441111923921};b.areaFactors={acres:0.000247105,centimeters:10000,centimetres:10000,feet:10.763910417,inches:1550.003100006,kilometers:0.000001,kilometres:0.000001,meters:1,metres:1,miles:3.86e-7,millimeters:1000000,millimetres:1000000,yards:1.195990046};function c(a,b,c){c===void 0&&(c={});var d={type:"Feature"};(c.id===0||c.id)&&(d.id=c.id);c.bbox&&(d.bbox=c.bbox);d.properties=b||{};d.geometry=a;return d}b.feature=c;function d(a,b,c){c===void 0&&(c={});switch(a){case "Point":return e(b).geometry;case "LineString":return j(b).geometry;case "Polygon":return g(b).geometry;case "MultiPoint":return o(b).geometry;case "MultiLineString":return n(b).geometry;case "MultiPolygon":return p(b).geometry;default:throw new Error(a+" is invalid")}}b.geometry=d;function e(a,b,d){d===void 0&&(d={});var e={type:"Point",coordinates:a};return c(e,b,d)}b.point=e;function f(a,b,c){c===void 0&&(c={});return m(a.map(function(a){return e(a,b)}),c)}b.points=f;function g(a,b,d){d===void 0&&(d={});for(var e=0,f=a;e<f.length;e++){var g=f[e];if(g.length<4){throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.")}for(var h=0;h<g[g.length-1].length;h++){if(g[g.length-1][h]!==g[0][h]){throw new Error("First and last Position are not equivalent.")}}}var i={type:"Polygon",coordinates:a};return c(i,b,d)}b.polygon=g;function h(a,b,c){c===void 0&&(c={});return m(a.map(function(a){return g(a,b)}),c)}b.polygons=h;function j(a,b,d){d===void 0&&(d={});if(a.length<2){throw new Error("coordinates must be an array of two or more positions")}var e={type:"LineString",coordinates:a};return c(e,b,d)}b.lineString=j;function k(a,b,c){c===void 0&&(c={});return m(a.map(function(a){return j(a,b)}),c)}b.lineStrings=k;function m(a,b){b===void 0&&(b={});var c={type:"FeatureCollection"};b.id&&(c.id=b.id);b.bbox&&(c.bbox=b.bbox);c.features=a;return c}b.featureCollection=m;function n(a,b,d){d===void 0&&(d={});var e={type:"MultiLineString",coordinates:a};return c(e,b,d)}b.multiLineString=n;function o(a,b,d){d===void 0&&(d={});var e={type:"MultiPoint",coordinates:a};return c(e,b,d)}b.multiPoint=o;function p(a,b,d){d===void 0&&(d={});var e={type:"MultiPolygon",coordinates:a};return c(e,b,d)}b.multiPolygon=p;function q(a,b,d){d===void 0&&(d={});var e={type:"GeometryCollection",geometries:a};return c(e,b,d)}b.geometryCollection=q;function r(a,b){b===void 0&&(b=0);if(b&&!(b>=0)){throw new Error("precision must be a positive number")}var c=Math.pow(10,b||0);return Math.round(a*c)/c}b.round=r;function s(a,c){c===void 0&&(c="kilometers");var d=b.factors[c];if(!d){throw new Error(c+" units is invalid")}return a*d}b.radiansToLength=s;function t(a,c){c===void 0&&(c="kilometers");var d=b.factors[c];if(!d){throw new Error(c+" units is invalid")}return a/d}b.lengthToRadians=t;function u(a,b){return w(t(a,b))}b.lengthToDegrees=u;function v(a){var b=a%360;b<0&&(b+=360);return b}b.bearingToAzimuth=v;function w(a){var b=a%(2*Math.PI);return b*180/Math.PI}b.radiansToDegrees=w;function x(a){var b=a%360;return b*Math.PI/180}b.degreesToRadians=x;function y(a,b,c){b===void 0&&(b="kilometers");c===void 0&&(c="kilometers");if(!(a>=0)){throw new Error("length must be a positive number")}return s(t(a,b),c)}b.convertLength=y;function z(a,c,d){c===void 0&&(c="meters");d===void 0&&(d="kilometers");if(!(a>=0)){throw new Error("area must be a positive number")}var e=b.areaFactors[c];if(!e){throw new Error("invalid original units")}var f=b.areaFactors[d];if(!f){throw new Error("invalid final units")}return a/e*f}b.convertArea=z;function A(a){return!isNaN(a)&&a!==null&&!Array.isArray(a)&&!/^\s*$/.test(a)}b.isNumber=A;function B(a){return!!a&&a.constructor===Object}b.isObject=B;function C(a){if(!a){throw new Error("bbox is required")}if(!Array.isArray(a)){throw new Error("bbox must be an Array")}if(a.length!==4&&a.length!==6){throw new Error("bbox must be an Array of 4 or 6 numbers")}a.forEach(function(a){if(!A(a)){throw new Error("bbox must only contain numbers")}})}b.validateBBox=C;function D(a){if(!a){throw new Error("id is required")}if(["string","number"].indexOf(typeof a)===-1){throw new Error("id must be a number or a string")}}b.validateId=D;function E(){throw new Error("method has been renamed to `radiansToDegrees`")}b.radians2degrees=E;function F(){throw new Error("method has been renamed to `degreesToRadians`")}b.degrees2radians=F;function G(){throw new Error("method has been renamed to `lengthToDegrees`")}b.distanceToDegrees=G;function H(){throw new Error("method has been renamed to `lengthToRadians`")}b.distanceToRadians=H;function I(){throw new Error("method has been renamed to `radiansToLength`")}b.radiansToDistance=I;function J(){throw new Error("method has been renamed to `bearingToAzimuth`")}b.bearingToAngle=J;function K(){throw new Error("method has been renamed to `convertLength`")}b.convertDistance=K});m(o);function $(a){return!isNaN(a)&&a!==null&&!Array.isArray(a)}function aa(a){if(!a)throw new Error('coord is required');if(a.type==='Feature'&&a.geometry!==null&&a.geometry.type==='Point')return a.geometry.coordinates;if(a.type==='Point')return a.coordinates;if(Array.isArray(a)&&a.length>=2&&a[0].length===undefined&&a[1].length===undefined)return a;throw new Error('coord must be GeoJSON Point or an Array of numbers')}function ab(a){if(!a)throw new Error('coords is required');if(a.type==='Feature'&&a.geometry!==null)return a.geometry.coordinates;if(a.coordinates)return a.coordinates;if(Array.isArray(a))return a;throw new Error('coords must be GeoJSON Feature, Geometry Object or an Array')}function ac(a){if(a.length>1&&$(a[0])&&$(a[1])){return !0}if(Array.isArray(a[0])&&a[0].length){return ac(a[0])}throw new Error('coordinates must only contain numbers')}function ad(a,b,c){if(!b||!c)throw new Error('type and name required');if(!a||a.type!==b){throw new Error('Invalid input to '+c+': must be a '+b+', given '+a.type)}}function ae(a,b,c){if(!a)throw new Error('No feature passed');if(!c)throw new Error('.featureOf() requires a name');if(!a||a.type!=='Feature'||!a.geometry){throw new Error('Invalid input to '+c+', Feature with geometry required')}if(!a.geometry||a.geometry.type!==b){throw new Error('Invalid input to '+c+': must be a '+b+', given '+a.geometry.type)}}function af(a,b,c){if(!a)throw new Error('No featureCollection passed');if(!c)throw new Error('.collectionOf() requires a name');if(!a||a.type!=='FeatureCollection'){throw new Error('Invalid input to '+c+', FeatureCollection required')}for(var d=0;d<a.features.length;d++){var e=a.features[d];if(!e||e.type!=='Feature'||!e.geometry){throw new Error('Invalid input to '+c+', Feature with geometry required')}if(!e.geometry||e.geometry.type!==b){throw new Error('Invalid input to '+c+': must be a '+b+', given '+e.geometry.type)}}}function ag(a){if(!a)throw new Error('geojson is required');if(a.geometry!==undefined)return a.geometry;if(a.coordinates||a.geometries)return a;throw new Error('geojson must be a valid Feature or Geometry Object')}function ah(){throw new Error('invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType')}function ai(a,b){if(!a)throw new Error((b||'geojson')+' is required');if(a.geometry&&a.geometry.type)return a.geometry.type;if(a.type)return a.type;throw new Error((b||'geojson')+' is invalid')}var aj=Object.freeze({getCoord:aa,getCoords:ab,containsNumber:ac,geojsonType:ad,featureOf:ae,collectionOf:af,getGeom:ag,getGeomType:ah,getType:ai}),ak=aj&&undefined||aj,al=n(function(a,b){Object.defineProperty(b,"__esModule",{value:!0});function c(a,b,c,d){d===void 0&&(d={});var e=ak.getCoord(a),f=o.degreesToRadians(e[0]),g=o.degreesToRadians(e[1]),h=o.degreesToRadians(c),i=o.lengthToRadians(b,d.units),j=Math.asin(Math.sin(g)*Math.cos(i)+Math.cos(g)*Math.sin(i)*Math.cos(h)),k=f+Math.atan2(Math.sin(h)*Math.sin(i)*Math.cos(g),Math.cos(i)-Math.sin(g)*Math.sin(j)),l=o.radiansToDegrees(k),m=o.radiansToDegrees(j);return o.point([l,m],d.properties)}b.default=c}),am=m(al);function an(a,b,c){if(a===null)return;var d,e,f,g,h,i,j,k=0,l=0,m,n=a.type,o=n==='FeatureCollection',p=n==='Feature',q=o?a.features.length:1;for(var r=0;r<q;r++){j=o?a.features[r].geometry:(p?a.geometry:a);m=j?j.type==='GeometryCollection':!1;h=m?j.geometries.length:1;for(var s=0;s<h;s++){var t=0,u=0;g=m?j.geometries[s]:j;if(g===null)continue;i=g.coordinates;var v=g.type;k=c&&(v==='Polygon'||v==='MultiPolygon')?1:0;switch(v){case null:break;case 'Point':if(b(i,l,r,t,u)===!1)return !1;l++;t++;break;case 'LineString':;case 'MultiPoint':for(d=0;d<i.length;d++){if(b(i[d],l,r,t,u)===!1)return !1;l++;v==='MultiPoint'&&t++};v==='LineString'&&t++;break;case 'Polygon':;case 'MultiLineString':for(d=0;d<i.length;d++){for(e=0;e<i[d].length-k;e++){if(b(i[d][e],l,r,t,u)===!1)return !1;l++}v==='MultiLineString'&&t++;v==='Polygon'&&u++};v==='Polygon'&&t++;break;case 'MultiPolygon':for(d=0;d<i.length;d++){v==='MultiPolygon'&&(u=0);for(e=0;e<i[d].length;e++){for(f=0;f<i[d][e].length-k;f++){if(b(i[d][e][f],l,r,t,u)===!1)return !1;l++}u++}t++};break;case 'GeometryCollection':for(d=0;d<g.geometries.length;d++)if(an(g.geometries[d],b,c)===!1)return !1;break;default:throw new Error('Unknown Geometry Type')}}}}function ao(a){var b=[];an(a,function(a){b.push(a)});return b}var ap=0;a.TrueSize=a.Layer.extend({geoJSON:{type:'Feature',properties:{},geometry:{type:'Polygon',coordinates:[]}},options:{color:'#FF0000',stroke:!0,weight:1,opacity:1,lineCap:'round',lineJoin:'round',dashArray:null,dashOffset:null,fill:!0,fillColor:'#FF0000',fillOpacity:0.3,fillRule:'evenodd',className:null,markerDiv:null,markerClass:null,iconAnchor:[]},initialize:function b(){var c=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.geoJSON,d=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this._options=Object.assign({},this.options,d);this._geometryType=c.geometry.type;a.Util.setOptions(this,this._options);this._initGeoJson(c,this._options)},_initGeoJson:function d(b,c){this._geoJSONLayer=a.geoJSON(b,c);this._currentId=ap++},setCenter:function b(a){var c=this._currentLayer.getBounds().getCenter();this._initialBearingDistance=this._getBearingDistance([c.lng,c.lat]);this._redraw(a.slice(0).reverse())},onAdd:function b(a){this._map=a;this._geoJSONLayer.addTo(this._map);this._currentLayer=this._geoJSONLayer.getLayers()[0];var c=this._currentLayer.getBounds().getCenter();this._createDraggable(this._currentLayer);this._options.markerDiv&&this._options.markerDiv.length&&(this._dragMarker=this._createMarker(c,this._options),this._dragMarker.addTo(this._map))},_createMarker:function d(b,c){var e=c.markerClass,f=c.markerDiv,g=c.iconAnchor,h=a.divIcon({className:e,html:f,iconAnchor:g});return a.marker(b,{icon:h,draggable:!0}).on('dragstart',this._onMarkerDragStart,this).on('drag',this._onMarkerDrag,this)},_onMarkerDragStart:function b(a){var c=a.target._latlng,d=c.lng,e=c.lat;this._initialBearingDistance=this._getBearingDistance([d,e])},_onMarkerDrag:function b(a){this._redraw([a.latlng.lng,a.latlng.lat])},_createDraggable:function c(b){var d=new a.Draggable(b._path);d.enable();d.on('dragstart',this._onDragStart,this).on('drag',this._onDrag,this)},_onDragStart:function b(a){var c=a.touches?a.touches[0]:a.target,d=this._getPositionFromEvent(c),e=this._getLatLngFromPosition(d);this._initialBearingDistance=this._getBearingDistance(e)},_onDrag:function b(a){var c=a.touches?a.touches[0]:a.originalEvent,d=this._getPositionFromEvent(c),e=this._getLatLngFromPosition(d);this._redraw(e)},_getPositionFromEvent:function b(a){if(typeof a._startPoint!=='undefined'){return a._startPoint}return{x:a.clientX,y:a.clientY}},_getLatLngFromPosition:function c(b){var d=this._map._container.getClientRects()[0],e=d.left,f=d.top,g=b.x,h=b.y,i=a.point(g-e,h-f),j=this._map.containerPointToLatLng(i),k=j.lng,l=j.lat;return[k,l]},_getBearingDistance:function b(a){var c=this;if(this._isMultiPolygon()){return this._currentLayer.feature.geometry.coordinates.map(function(b){return b[0].map(function(b){return c._getBearingAndDistance(a,b)})})}return ao(this._currentLayer.feature).map(function(b){return c._getBearingAndDistance(a,b)})},_getBearingAndDistance:function c(a,b){var d=i(a,b),e=l(a,b,{units:'kilometers'});return{bearing:d,distance:e}},_redraw:function b(a){var c=void 0;this._isMultiPolygon()?(c=this._initialBearingDistance.map(function(b){return[b.map(function(b){return am(a,b.distance,b.bearing,{units:'kilometers'}).geometry.coordinates})]})):(c=this._initialBearingDistance.map(function(b){return am(a,b.distance,b.bearing,{units:'kilometers'}).geometry.coordinates}));var d={type:'Feature',properties:{},geometry:{type:this._geometryType,coordinates:this._getCoordsByType(c,this._geometryType)}};this._geoJSONLayer.clearLayers();this._geoJSONLayer.addData(d);this._currentLayer=this._geoJSONLayer.getLayers()[0];this._createDraggable(this._currentLayer);this._dragMarker&&this._dragMarker.setLatLng(this._currentLayer.getCenter())},onRemove:function b(a){this._map=a;this._map.removeLayer(this._geoJSONLayer);this._dragMarker&&this._map.removeLayer(this._dragMarker);return this},_getCoordsByType:function c(a,b){switch(b){case 'LineString':{return a};case 'Polygon':{return[a]};case 'MultiPolygon':{return a};default:{return[a]}}},_isMultiPolygon:function a(){return this._geometryType==='MultiPolygon'}});a.trueSize=function(b,c){return new a.TrueSize(b,c)}}))
//# sourceMappingURL=Leaflet.TrueSize.min.js.map
